
Created:	04.12.2023
################################################################################################
https://en.wikipedia.org/wiki/Unix_time
GitHubAccount:Settings/Archives/SecurityLogs
------------------------------------------------------------------------------------------------

As a topic many things overlap with security. These include all sorts of methods of authenticating, logging, handling scopes and such.

My first puzzle was to find that something has been granted access to some part of my github account. Discovery was made from githubs web UI. I can't seem to figure out what is the thing that is now authorized. It's stated that my github user account has granted this access. I don't recall... There was info logged that this event has been initiated with firefox. Narrowing down by quite a bit since I don't usually have that much being done using firefox.
	Goddamn, now as I take a better look at the log entry, I see references to other browsers also. Find these logs at your github.com profile:
/settings/archives/securitylog

	I took an export of the file as a JSON file or thats what I was aiming to do. Got it as .gz that is not opening on windows machines by default. It's a gzip-family compressed file at least based on the suffix. Also took a file that was supposed to be .csv, but ended up being .gz also. Maybe this could be one way of securing plaintext data? I just noticed that the filters don't work the way they are supposed to. I have an IP address mentioned on the entry for creating access to some app and it matches my current wan address. This means that something from inside my network is doing this. Now when I try filtering using that same IP address, I don't get the access event to be displayed... Waaaait... Is it just me logging in using my master password?

    No it's not. I got the logs to show again. Now I see the export of logfiles and 2FA events. Also I can see logout of users that I did because of paranoia. I have to say this doesn't look good. I got the logfile that was in .gz to open. Of course it contained a bit too much data and formatted in a way that no-one can read it. Got the .json parser CLI-Tool that is called jq.

sudo apt update
sudo apt install jq
cat <massive-datafile> | jq > better-looking-data.json

    Found out that there was 3 times when "action": "oauth_access.create" was present. I did find the matching entry by comparing the data. I also found out that time is different in these logs than in my active-universe. I'm guessing that when all but the last 4 digits match, there is little time between the 2 events. If there is a reason to believe the logs on timestampping, then time 2 seconds apart generated 303 of number value difference between 2 events. First 9 digits were the same.

    When doing this detective work, I saw that there was a time some time ago when doing something totally different in github, there was 3 entries happening very close to each other. The actions were create token, create authorization and regenerate token. So there is a way to handle the scopes where one can have access to. Also it might be that the last time I did it, I did it even worse than now. What I've found out in the past about timestamps is that they can mean many things. Who or what is generating the stamp? When is it generated? If timed, but machine is busy at the planned time, what happens? If for some reason there is failure to access the source of time, is there a backup? What security measures can we make that rely on time if it's relative? How to format time properly? What timezone? Please read about Epoch time. I believe seconds from 1970. Mayan calendar ending was just a warmup. Soon the real shit starts to happen!

    Here is a thing to note. While I got mixed up with my linux workspaces, I accidentally opened my browser in another window. Did my best to correct my error and after a while when returning to my correct browser, I get a message that says: "You signed in with another tab or window. Reload to refresh your session." Time is now: 2:27AM and I'll click refresh. Let's see what happens.

################################################################################################
## End of File
################################################################################################

