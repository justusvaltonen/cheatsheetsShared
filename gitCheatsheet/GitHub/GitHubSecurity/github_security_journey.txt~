
Created:	04.12.2023			Updated: 07.12.2023
################################################################################################
https://en.wikipedia.org/wiki/Unix_time
https://www.theguardian.com/info/developer-blog/2013/apr/29/rewrite-git-history-with-the-bfg
https://docs.github.com/en/apps/oauth-apps/using-oauth-apps/reviewing-your-authorized-oauth-apps    (3)
https://docs.github.com/en/apps/oauth-apps/using-oauth-apps/internal-oauth-apps                     (4)
https://www.oauth.com/oauth2-servers/access-tokens/
https://oauth.net/2/access-tokens/                                                                  (6)
https://oauth.net/2/refresh-tokens/                                                                 (7)
https://oauth.net/id-tokens-vs-access-tokens/                                                       (8)
https://user-agents.net/string/faraday-v0-17-3                                                      (9)
GitHubAccount:Settings/Archives/SecurityLogs
------------------------------------------------------------------------------------------------

As a topic many things overlap with security. These include all sorts of methods of authenticating, logging, handling scopes and such.

My first puzzle was to find that something has been granted access to some part of my github account. Discovery was made from githubs web UI. I can't seem to figure out what is the thing that is now authorized. It's stated that my github user account has granted this access. I don't recall... There was info logged that this event has been initiated with firefox. Narrowing down by quite a bit since I don't usually have that much being done using firefox.
	Goddamn, now as I take a better look at the log entry, I see references to other browsers also. Find these logs at your github.com profile:
/settings/archives/securitylog

	I took an export of the file as a JSON file or thats what I was aiming to do. Got it as .gz that is not opening on windows machines by default. It's a gzip-family compressed file at least based on the suffix. Also took a file that was supposed to be .csv, but ended up being .gz also. Maybe this could be one way of securing plaintext data? I just noticed that the filters don't work the way they are supposed to. I have an IP address mentioned on the entry for creating access to some app and it matches my current wan address. This means that something from inside my network is doing this. Now when I try filtering using that same IP address, I don't get the access event to be displayed... Waaaait... Is it just me logging in using my master password?

    No it's not. I got the logs to show again. Now I see the export of logfiles and 2FA events. Also I can see logout of users that I did because of paranoia. I have to say this doesn't look good. I got the logfile that was in .gz to open. Of course it contained a bit too much data and formatted in a way that no-one can read it. Got the .json parser CLI-Tool that is called jq.

sudo apt update
sudo apt install jq
cat <massive-datafile> | jq > better-looking-data.json

    Found out that there was 3 times when "action": "oauth_access.create" was present. I did find the matching entry by comparing the data. I also found out that time is different in these logs than in my active-universe. I'm guessing that when all but the last 4 digits match, there is little time between the 2 events. If there is a reason to believe the logs on timestampping, then time 2 seconds apart generated 303 of number value difference between 2 events. First 9 digits were the same.

    When doing this detective work, I saw that there was a time some time ago when doing something totally different in github, there was 3 entries happening very close to each other. The actions were create token, create authorization and regenerate token. So there is a way to handle the scopes where one can have access to. Also it might be that the last time I did it, I did it even worse than now. What I've found out in the past about timestamps is that they can mean many things. Who or what is generating the stamp? When is it generated? If timed, but machine is busy at the planned time, what happens? If for some reason there is failure to access the source of time, is there a backup? What security measures can we make that rely on time if it's relative? How to format time properly? What timezone? Please read about Epoch time. I believe seconds from 1970. Mayan calendar ending was just a warmup. Soon the real shit starts to happen!

    Here is a thing to note. While I got mixed up with my linux workspaces, I accidentally opened my browser in another window. Did my best to correct my error and after a while when returning to my correct browser, I get a message that says: "You signed in with another tab or window. Reload to refresh your session." Time is now: 2:27AM and I'll click refresh. Let's see what happens. Didn't ask for a password or anything. Reloaded and all works. No log entries. Sessions shows only one: my current one.
	--> I guess that this happened +++05.12.2023:02.27+++

    I had to keep the logs of my account in a separate place so that by accident they wouldn't end up public exposing something that can be used for harming my account and making my life even harder than it already is. There is a way to keep ones filestructure intact on a local machine while still sharing the repository. By adding .gitignore file to your repository rootfolder and adding (one entry per line) the relative path to a file one doesn't wish to share to the .gitignore. Beginning dot on the name indicates that the file is hidden. This means that it's very loosely hidden, just so that you can see a difference between regular files and files that are somehow sensitive. If one uses NodeJS the typical whole folder added to the list is node_modules that may end up being big on a large project or if one just wants to try out everything they see. I categorize these people with a lable: 'feature junky'. Very good trait when learning. Very bad when doing production things. This is not to be taken literally. There are times when depending on a lot of SW by others is neccessary. Also even in training the dependency listing can have some unused / unneccessary projects. Since the topic indicates this being a security related file, I must add that when looking for a next target, one approach is to filter by the amount of dependencies used. There usually are plenty of securityflaws even when the automation doesn't catch them. Sometimes it's also hard to define who's job is it to make the end-product safe. Does the one that shares the repository with obvious flaws assume that because of the flaws no sane person would integrate the code with access management for example. Sometimes the one that integrates the code is too lazy to RTFM and just uses it without thinking of security. How you use the code is what matters.

    Back to logs. My logs stated that there is "action": "oauth_access.create" being done at the time I was AFK. Also what is weird is that I don't even use OAuth yet on anything made by me. There might be some logging in to my github-account done when OAuth is used. But access for an application? Not me. Who then? What about the regenerating. This means there has been one already or is it just the thing I suspected that when a token is created, some skeletonkey is created first that is stored somewhere else for case of losing the token and renewal of access. The word access seems to be repeated a lot. Not sure if I get this right, but OAuth provides different kinds of tokens for different usecases. Do we have any info on the token or where it could be found. I would like to know what it's for. Will there ever be a conclution to this mystery? Now it's time to put another hat on and return with a different account...

    Finding a link that resembles my problem at (3). No access is granted. But wait! I found from PersonalAccount/Settings/Access/Emails: "<my-userid-from-logs>+justusvaltonen@users.noreply.github.com will be used for web-based Git operations, e.g., edits and merges. ". So I have an infochannel in github? What properties does it have? Can I send? Do I have a mailbox somewhere? Hey, there is a mention about an option that I can enable to block my mail from CLI push operations. That address I mentioned can be used there for privacy. Cool feature. Not going to set it up right now or neither am I going to find out about my mails capabilities. Also there is a feature that requires users to have history to be able to push to my account. Still it doesn't affect if tokens are granted? Also granting of tokens seems possible. Annoying as hell. Oh wait, yeah, the thing was done using my username.

    When reading about OAuth access tokens from (6) I can see that there is no info about the user on the token. It should carry only some part that enables checking privilages, but not the user? Also I'm not sure about the type of the token based on the log entries. Then there is the OAuthRefreshToken that enables automatic regenerating of the original tokens. No user interaction required. Regeneration grants with same privilages as the previous token (7). Just found out about faraday. Some webcrawlers may be testing my linking skills. (9)


oauth_access.regenerate		- Access token was regenerated
oauth_access.create		- Access token was created
"_document_id"          - ???
"user_agent"            - ???
################################################################################################
## End of File
################################################################################################

