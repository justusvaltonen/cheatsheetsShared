
Created:	03.01.2024           Updated: +++ +++
################################################################################################
https://github.com/skills/publish-packages
https://github.com/justusvaltonen/skills-publish-packages

https://www.docker.com/why-docker/
------------------------------------------------------------------------------------------------

This course is about CD (Continous Delivery). Emphasis on artifacts.
    --> Sounds cool. HOMM3 was one of the best. Lightning + SP 4 life.

Who is this for: Developers, DevOps engineers, full stack developers, cloud engineers.
What you'll learn: Continuous delivery, how to save and access build artifacts, package management, how to publish to GitHub Packages.
What you'll build: We will build a Docker image that runs a small game.

In this course, you will:
    Create a workflow
    Add a Dockerfile
    Merge your pull request

------------------------------------------------------------------------------------------------
Step 1: Create the workflow file

-Seems we are creating a "3-in-a-row", or tic-tac-toe as one might call it. Sounds fun.

What does any word mean, really? Only a few can explain them, but can use them. Thing is that they are slightley different for different people. One reason for elevated bloodpressure is not knowing what is meant by CI/CD. It's incredibly important for employers that everyone applying for a job knows what CI/CD means, even when everyone has a different meaning to it. I have some difficulties "integrating" to socieatal norms at times. Luckily GitHub is here to save the day! No superpowers or ridiculous spandex, but only explaining CI/CD and saying it's not for debate. This is what it means...

Imagine it's like group-theory in math... XD Enough with the imagining and the metaforas.

"Code":     ["Continous Integration (CI)", "Continous Delivery (CD)", "Continous Deployment (CD)... wait, no, (DP)"],
"Build":    ["Continous Integration (CI)", "Continous Delivery (CD)", "Continous Deployment (DP)"],
"Testing":  ["Continous Integration (CI)", "Continous Delivery (CD)", "Continous Deployment (DP)"],
"Release":  ["Continous Delivery (CD)", "Continous Deployment (DP)"],
"Deploy":   ["Continous Deployment (DP)"]

CI      == Sharing code inside the Dev people inside a company. New stuff arrives multiple times a day
CD      == Share with the world the same stuff as earlier. Now the word 'world' means so many things it's a guessing game what exactly happens.
Docker  == Thing that enables running containers. Containers run on just about any machine. Bundle of SW as simplicity. Easy on machinery. Better than VM
  Docker Image      == Bundle of SW. Kind of like linux, but works on different level. Image contains same info that would have in the old days put to a CD-ROM
  Dockerfile        == Instructions to build a runtime environment of docker container. Dockerfile has these configs.
  Docker Container  == Runtime environment that runs Docker image SW


We'll start by creating the workflow file to publish a Docker image to GitHub Packages.

-Remember to use the sidebranch: 'CD', when fooling around with things/stuff

On publishing an image for docker usage, I specify things in a YAML-file. Tutorial that is there to help me, doesn't give information where the value for a field is gotten from. Field is the last one, the one that says tags:
      - name: Build container
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}

context: path in GitHubContainerRegistry container/pod/vm/server where the image will be placed for future use. To make things a bit harder, the usual "~/" or "/" is not the home or root of the repository for images. Instead only a dot is used to mark root. This is not in anyway proven. When you get there, take a look. Chatbot gives possibly 2 kinds of information. One says it is the root dir and one states that it is the relative path of where a process? is run. I have learned that use of words is in constant entropy (the way I mean it, can be replaced with the word change). Amazing how we can avoid bigger conflicts with our conflicting information on things. Big applause to human kind for not killing each-other. Maybe using dictionarys would be good to avoid conflicts, so small buu for that.

push: When the image is created (someones local, my mystical cloud git hub something, possibly somewhere else I do not know about), will it be stored. Do you want to automatically push the image to a GHCR-repo under your account. Defaults to no.


-Hmm, the chatbot did the unexpected and gave me 2 slightly different answers. First was the one with a small mixup with where . points at. That being said, it can be technically correct aswell, since for example when using git, we initialize a repo on some local. For that repo, the place with the init happened IS the root for that repo. Saying that, chatbot hinted in the right way where the file will be most likely executed on creation. This means exactly the root of the repo. Now if one is following instructions for the first time and just going with it, these findings of roots can be a mess. Depending on the context, roots are almost everywhere.
    My advice is that do not try to become root unless you have a very good reason to. You may endup accidentally enabling almost all for your big-pic posting application. If somebody sees this, who knows what they do, maybe use your machine as part of a botnet to mine bitcoin making it warmer outside.
    My point: when possible, try to avoid confusion unless you are aware of the situation. I heard of this SW called Obsidian that looked quite nice. Easier structuring than with just notepad. I do not know about the privacy things then. Looked croooked, but I might have been very hasty to judge because of lack of time at that moment.
    
Second answer was also OK, giving less to guess about. There was a use of words that I personally disliked, so I preferred the first answer. When making abstractions un-perfectly for my personal taste / knowledgelevel things will not recieve my time. Maybe a thing to work on for more.
    I take some of that back. There was some very unclear "this, that, the, it" usage that could reference many objects (I see all as objects today, tomorrow as tradesgoods convertable to food or possibly tools with usecase unspecified ATM). The point in all this understanding of where configvalues come from is to be able to use them correctly in the future. What was left out from the second answer was all the unasked questions. This is not in any way obvious always, but there is a goal with a purpose in mind when asking questions.


ATM == "Automatic Teller Machine", "At The Moment". Second one is more likely out of these.




GETTING TOO TIRED, CONTINUE TOMORROW

################################################################################################
## End of File
################################################################################################

