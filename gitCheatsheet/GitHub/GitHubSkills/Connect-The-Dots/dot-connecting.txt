
Created:	30.12.2023           Updated: +++ +++
################################################################################################
https://github.com/skills/connect-the-dots
https://github.com/justusvaltonen/skills-connect-the-dots

https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/autolinked-references-and-urls
https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/about-task-lists
https://github.com/github/docs/
------------------------------------------------------------------------------------------------
Who is this for: Developers, GitHub users, users new to Git, students, managers, and teams.
What you'll learn:
    Find relevant issues and pull requests.
    Search history to find context.
    Make connections within GitHub to help others find things.

In this course, you will:
    Resolve a duplicate issue.
    Find a commit in history.
    Fix a broken sidebar.

What you'll build: Repository with existing commits, duplicated issues, and a content defect to be fixed.

------------------------------------------------------------------------------------------------
Step 1: Resolve duplicate issues

"when you reference another issue or pull request by number, that number will be hyperlinked. At the same time, a cross-reference is created in the linked issue or pull request. This two-way reference helps people track the relationship of information across GitHub."
    --> Special, don't know, but useful and brilliant, yes. Behaviour from database worlds.

"When you link to another issue, a reference within GitHub is automatically created. In fact, you don't even need to include the full link. If you were to type #5 within a comment, that would turn into a link to issue or pull request number 5."
-Cross references expose duplication by design

To reference don't use whitespace after # , but instead type straight to it:
#156

-Accepted arguments are: ['title of an issue', 'pull request']
-Navigate to Issues on top in GH

------------------------------------------------------------------------------------------------
Step 2: Find a commit in history

'git blame' enables to look back

97fd0cc     --> Put the underscore
069e0e5     --> Thought there was an issue of not having enough underscore and added another. This is what we seek

------------------------------------------------------------------------------------------------
Step 3: Fix a broken sidebar

The above hashes are commit hashes. They hold info on the commit:
    Who made the commit.
    What other changes were included.
    When the commit was made.
    Which pull request the commit was a part of.

The pull request is important because it goes beyond knowing when a commit happened. You can know why a commit happened. Finding history is not about blaming anyone, but about seeing the bigger picture. Why were decisions made? Who was involved? What were the build outputs and test results for each commit? Who requested changes, and who approved them?
    --> Good attitude in general to have
    

Because of a bug (I assume) in step 3, I have to start from the beginning.

The hash changed to:    f71b332


The bug disabled the "inside code diff" commenting. Once remade, it was tedious to get to comment the thing. No matter where you click, it didn't seem to enable the feature.
As usual, all of a sudden the menu opened from thin air....



################################################################################################
## End of File
################################################################################################

